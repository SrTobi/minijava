// This is a simple generator for the test programs that exercise the handling
// of infix operators.  The generated programs are random and assert on the
// results to be the same as those previously computed by Java.
//
// Use this program like this
//
//     $ java -cp . Infix 100
//
// to create a test program with 100 operations or
//
//     $ java -cp . Infix 100 System.id
//
// to create a similar program but each constant wrapped into a call to the
// identity function `System.id`.
//
// This generator is currently not hooked up into the build system because it
// requires a Java toolchain which would be too much to require.


import java.util.Random;

class Infix {

	final Random rng = new Random();

	int randint(final boolean zerook) {
		while (true) {
			final int x = this.rng.nextInt();
			if (x != 0 || zerook) {
				return x;
			}
		}
	}

	void generateTest(final int n, final String func) {
		final long seed = this.rng.nextLong();
		this.rng.setSeed(seed);
		if (n < 0) {
			throw new RuntimeException("N < 0");
		}
		final String format = (func == null)
			? "\t\tif (%11d %s %11d != %11d) { System.out.println(%3d); }\n"
			: "\t\tif (@(%11d) %s @(%11d) != @(%11d)) { System.out.println(%3d); }\n".replace("@", func);
		System.out.println("/* THIS IS A GENERATED FILE -- DO NOT EDIT! */");
		System.out.printf("/* Generated by '%s' with random seed %016x and n = %d. */\n", "Infix.java", seed, n);
		System.out.println("");
		System.out.println("// pragma output");
		System.out.println("");
		System.out.println("class Test {");
		System.out.println("\tpublic static void main(String[] args) {");
		for (int i = 0; i < n; ++i) {
			switch (rng.nextInt(5)) {
			case 0:
			{
				final int lhs = this.randint(true);
				final int rhs = this.randint(true);
				final int res = lhs + rhs;
				System.out.printf(format, lhs, "+", rhs, res, i);
				break;
			}
			case 1:
			{
				final int lhs = this.randint(true);
				final int rhs = this.randint(true);
				final int res = lhs - rhs;
				System.out.printf(format, lhs, "-", rhs, res, i);
				break;
			}
			case 2:
			{
				final int lhs = this.randint(true);
				final int rhs = this.randint(true);
				final int res = lhs * rhs;
				System.out.printf(format, lhs, "*", rhs, res, i);
				break;
			}
			case 3:
			{
				final int lhs = this.randint(true);
				final int rhs = this.randint(false);
				final int res = lhs / rhs;
				System.out.printf(format, lhs, "/", rhs, res, i);
				break;
			}
			case 4:
			{
				final int lhs = this.randint(true);
				final int rhs = this.randint(false);
				final int res = lhs % rhs;
				System.out.printf(format, lhs, "%", rhs, res, i);
				break;
			}
			default:
				throw new RuntimeException();
			}
		}
		System.out.println("\t}");
		System.out.println("}");
	}

	public static void main(final String[] args) {
		final Infix me = new Infix();
		switch (args.length) {
		case 1:
			me.generateTest(Integer.parseInt(args[0]), null);
			break;
		case 2:
			me.generateTest(Integer.parseInt(args[0]), args[1]);
			break;
		default:
			throw new RuntimeException("usage: java -cp . Infix N [FUNC]");
		}
	}

}
