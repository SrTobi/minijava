#! /bin/sh -eu
#! -*- coding:utf-8; mode:shell-script; -*-

path=$(readlink -f "${0}")
rootdir=$(dirname "${path}")
tagfile="${rootdir}/.b6353339-fae0-4c5f-83bf-66463a3bafc6.tag"
builddir="${rootdir}/stage"
envfile="${builddir}/.environment"
clean=0
force=0
dox=0
buildtype="${CMAKE_BUILD_TYPE-Release}"

message() {
	level="${1}"
	shift
	echo "build: ${level}: $@" >&2
}

die() {
	message error "$@"
	exit 1
}

first() {
	echo "$1"
}

dumpenv() {
	CMAKE_BUILD_TYPE="${buildtype}" env
}

need_reconfiguration() {
	if test ${force} -gt 0
	then
		message info "Reconfiguration forced by user"
		return 0
	fi
	if test -d "${builddir}/" && test -r "${envfile}"
	then
		oldhash=$(first $(md5sum "${envfile}"))
		newhash=$(first $(dumpenv | md5sum))
		if test "x${oldhash}" = "x${newhash}"
		then
			message info "Environment did not change; no reconfiguration needed"
			return 1
		else
			message info "Environment changed; reconfiguration needed"
		fi
	fi
	return 0
}

for arg in "$@"
do
	case "${arg}"
	in
		--help)
			echo "build [--force] [--build-type=TYPE]"
			echo "build --clean"
			echo ""
			echo "Configures, builds and unit tests the project in the 'stage'"
			echo "sub-directory of the source tree."
			echo ""
			echo "Options:"
			echo ""
			echo "  --build-type=TYPE   set the CMake build type to TYPE"
			echo "  --force             always force reconfiguration and rebuild everything"
			echo "  --clean             only remove the build-directory"
			echo "  --doxygen           generate API documentation"
			echo "  --help              display this text and exit"
			echo "  --version           display version information and exit"
			echo ""
			echo "Options that take an argument only understand the '--option=VALUE'"
			echo "and not the '--option VALUE' syntax.  Arguments are mandatory."
			echo ""
			echo "Environment Variables:"
			echo ""
			echo "  CMAKE_BUILD_TYPE    default CMake build type"
			echo ""
			echo "If the environment or the selected build type has changed since"
			echo "the last invocation, the script will always do a clean build."
			echo ""
			echo "You can execute this script from any directory.  It will try"
			echo "to find the source directory itself."
			echo ""
			echo "The exit status will be zero if and only if all steps completed"
			echo "successfully."
			exit
			;;
		--version)
			echo "build 1.0"
			echo "Configure, build and unit test the project."
			exit
			;;
		--build-type=*)
			buildtype="${arg#--build-type=}"
			;;
		--force)
			force=1
			;;
		--clean)
			clean=1
			;;
		--doxygen)
			dox=1
			;;
		-*)
			die "Unknown option: ${arg}"
			;;
		*)
			die "Too many arguments"
			;;
	esac
done
unset arg

test -f "${tagfile}" || die "Cannot find root directory"

if test ${clean} -gt 0
then
	rm -rf "${builddir}/" || die "Cannot remove old build directory"
	exit
fi

if need_reconfiguration
then
   rm -rf "${builddir}/" || die "Cannot remove old build directory"
   mkdir -p "${builddir}/" || die "Cannot create build directory"
   dumpenv > "${envfile}" || die "Cannot save environment"
   ( cd "${builddir}/" && cmake -DCMAKE_BUILD_TYPE="${buildtype}" .. )        \
	   || die "Cannot configure project"
fi

( cd "${builddir}/" && cmake --build . ) || die "Cannot build project"
( cd "${builddir}/" && ctest -T test ) || die "Unit tests failed"

test ${dox} -eq 0                                                             \
	|| ( cd "${builddir}/" && cmake --build . --target docs )                 \
	|| die "Cannot build API documentation"
